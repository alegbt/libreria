package it.formazione.libreria.mybatis.mapper;

import it.formazione.libreria.mybatis.model.Autori;
import java.util.List;

import org.apache.ibatis.annotations.*;
import org.apache.ibatis.type.JdbcType;



@Mapper
public interface AutoriMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table autori
     *
     * @mbg.generated Tue Nov 07 17:49:16 CET 2023
     */
    @Delete({
        "delete from autori",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table autori
     *
     * @mbg.generated Tue Nov 07 17:49:16 CET 2023
     */
    @Insert({
        "insert into autori (id, nome_autore)",
        "values (#{id,jdbcType=INTEGER}, #{nomeAutore,jdbcType=VARCHAR})"
    })
    int insert(Autori row);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table autori
     *
     * @mbg.generated Tue Nov 07 17:49:16 CET 2023
     */
    @Select({
        "select",
        "id, nome_autore",
        "from autori",
        "where id = #{id,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="nome_autore", property="nomeAutore", jdbcType=JdbcType.VARCHAR)
    })
    Autori selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table autori
     *
     * @mbg.generated Tue Nov 07 17:49:16 CET 2023
     */
    @Select({
        "select",
        "id, nome_autore",
        "from autori"
    })
    @Results({
        @Result(column="id", property="id", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="nome_autore", property="nomeAutore", jdbcType=JdbcType.VARCHAR)
    })
    List<Autori> selectAll();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table autori
     *
     * @mbg.generated Tue Nov 07 17:49:16 CET 2023
     */
    @Update({
        "update autori",
        "set nome_autore = #{nomeAutore,jdbcType=VARCHAR}",
        "where id = #{id,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(Autori row);




    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////        CUSTOM METHODS           ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//    @Select({
//            "<script>",
//            "SELECT",
//            "  a.id AS autore_id, a.nome_autore,",
//            "  l.id AS libro_id, l.nome, l.prezzo, l.autore_id, l.casa_ed_id,",
//            "  c.id AS casa_id, c.nome_casa",
//            "FROM",
//            "  autori a",
//            "LEFT JOIN",
//            "  libri l ON a.id = l.autore_id",
//            "LEFT JOIN",
//            "  casa_editrice c ON l.casa_ed_id = c.id",
//            "<where>",
//            "  <if test='autoreID != null'>",
//            "    AND a.id = #{autoreID,jdbcType=INTEGER}",
//            "  </if>",
//            "  <if test='libroID != null'>",
//            "    AND l.id = #{libroID,jdbcType=INTEGER}",
//            "  </if>",
//            "  <if test='casaID != null'>",
//            "    AND c.id = #{casaID,jdbcType=INTEGER}",
//            "  </if>",
//            "</where>",
//            "</script>"
//    })
//    @ResultMap("AutoreResultMap2")
//    @Results(id = "libroResultMap2", value = {
//            @Result(property = "id", column = "libro_id", id = true),
//            @Result(property = "nome", column = "nome"),
//            @Result(property = "prezzo", column = "prezzo"),
//            @Result(property = "autoreId", column = "autore_id"),
//            @Result(property = "casaEdId", column = "casa_ed_id"),
//            @Result(property = "casaEditrice", column = "casa_ed_id", one = @One(select = "selectCasaEditriceById"))
//            @Results(id = "autoreResultMap2", value = {
//                    @Result(property = "id", column = "autore_id", id = true),
//                    @Result(property = "nomeAutore", column = "nome_autore"),
//                    @Result(property = "libriAutore", column = "autore_id", many = @Many(select = "it.formazione.libreria.mybatis.mapper.LibroMapper.selectByAutoreId"))
//            })
//    })
//    List<Autori> selectViaAutoriOrLibroOrCasa(@Param("autoreID") Integer autoreID,
//                                              @Param("libroID") Integer libroID,
//                                              @Param("casaID") Integer casaID);
//



}